@model IEnumerable<GuestBookProject.EntityModel.GuestBook>
@using X.PagedList;
@using X.PagedList.Mvc;
@using X.PagedList.Mvc.Common;
@using Microsoft.AspNet.Identity;
@{
    var PageList = (IPagedList)Model;
}
<style>
    .td-ellipsis {
        max-width: 100px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .custom-form-control {
        display: inline-block;
        width: auto;
    }
</style>
<h2>留言板</h2>
<p>
    <a href="@Url.Action("Create")" class="btn btn-success glyphicon glyphicon-plus"> 新增留言</a>
</p>

@using (Html.BeginForm())
{

    <p>
        作者: @Html.TextBox("searchString", ViewBag.CurrentFilter as string, htmlAttributes: new { @class = "form-control custom-form-control" })
        每頁顯示筆數: @Html.DropDownList("PageSize", null, ViewBag.CurrentPageSize as string, htmlAttributes: new { @class = "form-control custom-form-control" })
        <button type="submit" class="btn btn-primary glyphicon glyphicon-search" style="margin-bottom:5px"></button>
    </p>
}

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.UserName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Message)
        </th>
        <th>
            @Html.ActionLink("建立日期", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter, pageSize = ViewBag.CurrentPageSize })
            @if (string.IsNullOrEmpty(ViewBag.CurrentSort))
            {
                <span class="glyphicon glyphicon-sort-by-attributes-alt"></span>
            }
            else if (ViewBag.CurrentSort == "Date")
            {

                <span class="glyphicon glyphicon-sort-by-attributes"></span>
            }
        </th>
        <th>
            @Html.ActionLink("回覆數", "Index", new { sortOrder = ViewBag.ReplyCountSortParm, currentFilter = ViewBag.CurrentFilter, pageSize = ViewBag.CurrentPageSize })
            @if (ViewBag.CurrentSort == "ReplyCount_Desc")
            {
                <span class="glyphicon glyphicon-sort-by-attributes-alt"></span>
            }
            else if (ViewBag.CurrentSort == "ReplyCount")
            {
                <span class="glyphicon glyphicon-sort-by-attributes"></span>
            }
        </th>
        <th>
        </th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.UserName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td width="50%" class="td-ellipsis">
                @Html.DisplayFor(modelItem => item.Message)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreateDateTime)
            </td>
            <td style="text-align:center">
                @Html.DisplayFor(modelItem => item.ReplyCount)
            </td>
            <td>


                @if (User.Identity.IsAuthenticated && item.UserId != null && item.UserId == Convert.ToInt32(User.Identity.GetUserId()) || User.IsInRole("Admin"))
                {

                    <a class="glyphicon glyphicon-comment" style="margin-right:15px" href="/GuestBook/Details/@item.Id" />
                    <a class="glyphicon glyphicon-pencil" style="margin-right:15px" href="/GuestBook/Edit/@item.Id" />
                    <a class="glyphicon glyphicon-trash" href="/GuestBook/Delete/@item.Id" />
                }
                else
                {
                    <a class="glyphicon glyphicon-comment" style="margin-right:15px" href="/GuestBook/Details/@item.Id" />
                }
            </td>
        </tr>
    }
</table>

Page @(PageList.PageCount < PageList.PageNumber ? 0 : PageList.PageNumber) of @PageList.PageCount
@Html.PagedListPager(PageList, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, pageSize = ViewBag.CurrentPageSize }), PagedListRenderOptions.ClassicPlusFirstAndLast)